name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_PATH: 'src/WinKeysRemapper.csproj'
  # Note: .NET 8 is pre-installed on windows-latest runners, no setup needed

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify .NET version
      run: dotnet --version

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build Debug
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Debug --no-restore

    - name: Build Release
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Publish Windows x64
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --runtime win-x64 --self-contained true --output ./publish/win-x64

    - name: Publish Windows x86
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --runtime win-x86 --self-contained true --output ./publish/win-x86

    - name: Create artifacts directory
      run: mkdir artifacts

    - name: Package Windows x64
      run: |
        Compress-Archive -Path "./publish/win-x64/*" -DestinationPath "./artifacts/WinKeysRemapper-win-x64.zip"
        
    - name: Package Windows x86
      run: |
        Compress-Archive -Path "./publish/win-x86/*" -DestinationPath "./artifacts/WinKeysRemapper-win-x86.zip"

    - name: Copy additional files to artifacts
      run: |
        Copy-Item "README.md" "./artifacts/"
        Copy-Item "LICENSE" "./artifacts/"
        Copy-Item "config/key_mappings_example.json" "./artifacts/"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WinKeysRemapper-Build-${{ github.sha }}
        path: artifacts/

  release:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: WinKeysRemapper-Build-${{ github.sha }}
        path: artifacts/

    - name: Generate version number
      id: version
      run: |
        $date = Get-Date -Format "yyyy.MM.dd"
        $shortSha = "${{ github.sha }}".Substring(0, 7)
        $runNumber = "${{ github.run_number }}"
        $version = "v$date-build$runNumber"
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "SHORT_SHA=$shortSha" >> $env:GITHUB_OUTPUT
        echo "Generated version: $version"

    - name: Check if release exists
      id: check_release
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        try {
          $release = gh release view $version --json id 2>$null
          echo "EXISTS=true" >> $env:GITHUB_OUTPUT
          echo "Release $version already exists - will update"
        }
        catch {
          echo "EXISTS=false" >> $env:GITHUB_OUTPUT
          echo "Release $version does not exist - will create new"
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete existing release if it exists
      if: steps.check_release.outputs.EXISTS == 'true'
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        echo "Deleting existing release $version to update with new build..."
        gh release delete $version --yes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $shortSha = "${{ steps.version.outputs.SHORT_SHA }}"
        $releaseNotes = @"
        # WinKeysRemapper $version
        
        ## üöÄ Latest Build from Main Branch
        - High-performance Windows keyboard remapping
        - PowerToys-inspired architecture  
        - Support for 200+ keys including function keys, media keys, numpad
        - Application-specific targeting with JSON configuration
        - Optimized single-file executables with trimming enabled
        
        ## üì¶ Downloads
        - **Windows x64**: For 64-bit Windows systems (recommended)
        - **Windows x86**: For 32-bit Windows systems
        
        ## üõ†Ô∏è Installation
        1. Download the appropriate version for your system
        2. Extract the ZIP file
        3. Run WinKeysRemapper.exe as Administrator
        4. Configure key mappings in key_mappings.json
        
        ## üìã Requirements
        - Windows 10/11
        - Administrator privileges (for keyboard hooks)
        
        **Commit:** $shortSha
        **Build Number:** ${{ github.run_number }}
        **Build Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        "@
        
        gh release create $version `
          --title "WinKeysRemapper $version" `
          --notes $releaseNotes `
          --draft=false `
          --prerelease=false `
          ./artifacts/WinKeysRemapper-win-x64.zip `
          ./artifacts/WinKeysRemapper-win-x86.zip `
          ./artifacts/README.md `
          ./artifacts/LICENSE `
          ./artifacts/key_mappings_example.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-build:
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify .NET version
      run: dotnet --version

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const message = `
          ## ‚úÖ Build Status
          
          **Build successful!** üéâ
          
          - ‚úÖ .NET 8.0 compilation passed
          - ‚úÖ Dependencies restored successfully
          - ‚úÖ Release configuration build completed
          
          The WinKeysRemapper project builds successfully with your changes.
          
          **Build Details:**
          - Commit: \`${{ github.sha }}\`
          - .NET Version: ${{ env.DOTNET_VERSION }}
          - Configuration: Release
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
