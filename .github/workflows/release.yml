name: Tagged Release

on:
  push:
    tags:
      - 'v*'  # Triggered when you push a version tag like v1.0.0

permissions:
  contents: write  # Required to create releases and upload assets

jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: version
      run: |
        $tag = "${{ github.ref_name }}"
        # Remove 'v' prefix if present (e.g., v1.0.1 -> 1.0.1)
        $version = $tag -replace '^v', ''
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Tag: $tag, Version: $version"
    
    - name: Update project version
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $projectFile = "src/WinKeysRemapper.csproj"
        
        # Read the project file
        $content = Get-Content $projectFile -Raw
        
        # Update version numbers
        $content = $content -replace '<Version>[^<]*</Version>', "<Version>$version</Version>"
        $content = $content -replace '<AssemblyVersion>[^<]*</AssemblyVersion>', "<AssemblyVersion>$version</AssemblyVersion>"
        $content = $content -replace '<FileVersion>[^<]*</FileVersion>', "<FileVersion>$version</FileVersion>"
        
        # Write back to file
        $content | Set-Content $projectFile -NoNewline
        
        echo "Updated project version to $version"
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add src/WinKeysRemapper.csproj
        git commit -m "chore: update project version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push || echo "Nothing to push"
    
    - name: Build x64
      run: dotnet publish src/WinKeysRemapper.csproj -c Release -r win-x64 --self-contained -o artifacts/win-x64 -p:Version=${{ steps.version.outputs.version }}
      
    - name: Build x86  
      run: dotnet publish src/WinKeysRemapper.csproj -c Release -r win-x86 --self-contained -o artifacts/win-x86 -p:Version=${{ steps.version.outputs.version }}
      
    - name: Build Portable
      run: dotnet publish src/WinKeysRemapper.csproj -c Release --no-self-contained -o artifacts/portable -p:Version=${{ steps.version.outputs.version }} -p:PublishTrimmed=false
    
    - name: Create ZIP files
      run: |
        # Copy documentation to each build folder
        Copy-Item "README.md" -Destination "artifacts/win-x64/" -Force
        Copy-Item "docs/installation.md" -Destination "artifacts/win-x64/" -Force
        Copy-Item "docs/windows-security-warning.md" -Destination "artifacts/win-x64/" -Force
        
        Copy-Item "README.md" -Destination "artifacts/win-x86/" -Force
        Copy-Item "docs/installation.md" -Destination "artifacts/win-x86/" -Force
        Copy-Item "docs/windows-security-warning.md" -Destination "artifacts/win-x86/" -Force
        
        Copy-Item "README.md" -Destination "artifacts/portable/" -Force
        Copy-Item "docs/installation.md" -Destination "artifacts/portable/" -Force
        Copy-Item "docs/windows-security-warning.md" -Destination "artifacts/portable/" -Force
        
        # Create ZIP files
        Compress-Archive -Path "artifacts/win-x64/*" -DestinationPath "WinKeysRemapper-${{ steps.version.outputs.version }}-x64.zip" -Force
        Compress-Archive -Path "artifacts/win-x86/*" -DestinationPath "WinKeysRemapper-${{ steps.version.outputs.version }}-x86.zip" -Force  
        Compress-Archive -Path "artifacts/portable/*" -DestinationPath "WinKeysRemapper-${{ steps.version.outputs.version }}-portable.zip" -Force
    
    - name: Get tag message
      id: tag_message
      run: |
        $tagMessage = git tag -l --format='%(contents)' "${{ github.ref_name }}"
        # Remove empty lines and format
        $tagMessage = $tagMessage | Where-Object { $_.Trim() -ne "" }
        $formattedMessage = $tagMessage -join "`n"
        
        # Escape special characters for GitHub output
        $escapedMessage = $formattedMessage -replace '"', '\"' -replace '`', '\`'
        
        echo "message=$escapedMessage" >> $env:GITHUB_OUTPUT
        echo "Tag message: $escapedMessage"
    
    - name: Create Release
      run: |
        $tagMessage = "${{ steps.tag_message.outputs.message }}"
        
        # Build release notes with tag message
        $releaseNotes = @"
        Release ${{ github.ref_name }}

        ## ÔøΩ What's New
        $tagMessage

        ## ÔøΩüõ°Ô∏è Windows Security Warning
        Windows may show a security warning when running downloaded software. This is normal for unsigned applications. See the included documentation for instructions on how to safely run WinKeysRemapper.

        ## üì• Downloads
        - **x64**: For modern 64-bit Windows (most common)
        - **x86**: For older or 32-bit Windows  
        - **portable**: Requires .NET 8 (smallest download)

        ## üìñ Documentation
        Each download includes:
        - `README.md` - Complete usage guide
        - `installation.md` - Setup instructions
        - `windows-security-warning.md` - Security guidance
        "@
        
        gh release create ${{ github.ref_name }} `
          --title "WinKeysRemapper ${{ github.ref_name }}" `
          --notes $releaseNotes `
          "WinKeysRemapper-${{ steps.version.outputs.version }}-x64.zip" `
          "WinKeysRemapper-${{ steps.version.outputs.version }}-x86.zip" `
          "WinKeysRemapper-${{ steps.version.outputs.version }}-portable.zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
